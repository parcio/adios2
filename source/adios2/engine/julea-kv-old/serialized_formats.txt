---------------------Struct formats-- -------------------------------

                    /** Operators metadata info */
                    struct Operation
{
    /** reference to object derived from Operator class,
     *  needs a pointer to enable assignment operator (C++ class) */
    core::Operator *Op;
    /** Variable specific parameters */
    Params Parameters;
    /** resulting information from executing Operation (e.g. buffer size) */
    Params Info;
};

template <class T>
struct Metadata
{
    // TODO: needed?
    // std::map<size_t, std::vector<helper::SubStreamBoxInfo>>
    // StepBlockSubStreamsInfo;
    // struct helper::BlockDivisionInfo SubBlockInfo;
    // SelectionType Selection = SelectionType::BoundingBox;

    // TODO: ShapeID is an enum (ADIOSTypes.h) being globalvalue,
    // globalarray,...

    Dims Shape;
    Dims Start;
    Dims Count;
    Dims MemoryStart;
    Dims MemoryCount;

    // std::vector<core::IO::Operation> Operations;
    // std::vector<core::VariableBase::Operation> Operations; // TODO serialize
    // std::vector<T> Values;
    // std::vector<T> MinMaxs; // sub-block level min-max

    // T *Data = nullptr;
    T Min = T();
    T Max = T();
    // T Value = T();   //TODO: not set in variable?!

    // size_t Step = 0; // TODO: currentStep? variable has no Step itself
    size_t StepsStart = 0;
    size_t StepsCount = 0;
    size_t BlockID = 0;

    size_t CurrentStep = 0; // Julea Engine
    size_t BlockNumber = 0; // Julea Engine

    // int WriterID = 0; //TODO: what exactly is this and when used?

    /** Global array was written as Joined array, so read accordingly */
    bool IsReadAsJoined = false;

    /** Global array was written as Local value, so read accordingly */
    bool IsReadAsLocalValue = false;

    /** For read mode, false: streaming */
    bool IsRandomAccess = true;

    /** is single value or array */
    bool IsValue = false;
    /** if reader and writer have different ordering (column vs row major)
     */
    bool IsReverseDimensions = false;
};

/** Step related metadata for a variable:  */
struct StepMetadata
{
    Dims shape;
    Dims start;
    Dims count;
    std::string type;
    bool isConstantDims;

    // array of blocks per step
    size_t numberSteps = 0;
    size_t *blocks = nullptr;
};

---------------------Serialized formats-- -------------------------------

    == == == == == == == == == == == == == == block metadata == == == == == ==
    == == == == == == == == == ==
    =

        size_t shapeSize = 0;
size_t *shape = nullptr;
size_t startSize = 0;
size_t *start = nullptr;
size_t countSize = 0;
size_t *count = nullptr;

size_t memoryStartSize = 0;
size_t *memoryStart = nullptr;
size_t memoryCountSize = 0;
size_t *memoryCount = nullptr;

sizeof(T) min;
sizeof(T) max;
sizeof(T) value;

size_t StepsStart = 0;
size_t StepsCount = 0;
size_t BlockID = 0;

size_t CurrentStep = 0; // Julea Engine
size_t BlockNumber = 0; // Julea Engine

bool IsValue = false;
/** used in streaming mode, true: first variable encounter, false: variable
 * already encountered in previous step */
bool m_FirstStreamingStep = true;

== == == == == == == == == == == == == == == == step metadata == == == == == ==
    == == == == == == == == ==
    = bool isConstantDims = true;
bool IsReadAsJoined = false;
bool IsReadAsLocalValue = false;
bool IsRandomAccess = true;

size_t typeLen = 0;
char *type = nullptr;

ShapeID m_ShapeID = ShapeID::Unknown; ///< see shape types in ADIOSTypes.h

size_t shapeSize = 0;
size_t *shape = nullptr;
size_t startSize = 0;
size_t *start = nullptr;
size_t countSize = 0;
size_t *count = nullptr;

size_t numberSteps = 0;
size_t *blocks = nullptr;