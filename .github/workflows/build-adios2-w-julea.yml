name: Compile ADIOS2 with JULEA

on:
  #TODO use dispatch so it is triggered when JULEA is updated?
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # TODO: Debug?
  BUILD_TYPE: Release

jobs:
  # Job: Install JULEA dependencies, build JULEA and configure it
  build-adios2-julea:
    name: Build ADIOS2 with JULEA
    runs-on: ${{ matrix.os.dist }}
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        os:
          # - dist: ubuntu-22.04
          #   compiler: gcc
          #   compiler_version: 11.3.0
          # - dist: ubuntu-20.04
          #   compiler: gcc
          #   compiler_version: 9.4.0
          - dist: ubuntu-18.04
            compiler: gcc
            compiler_version: 7.5.0
    steps:
      - name: Checkout JULEA
        uses: actions/checkout@v3
        with:
          repository: Bella42/julea
          ref: dai-copy
          path: julea

        # Dependencies
      - name: Cache dependencies
        id: dep-cache
        uses: actions/cache@v3
        with:
          path: julea/dependencies
          key: ${{ matrix.os.dist }}-${{ matrix.os.compiler }}-${{ matrix.os.compiler_version }}-${{ hashFiles('julea/scripts/spack', 'julea/scripts/install-dependencies.sh') }}-dependencies
      
      - name: Install dependencies
        if: ${{ steps.dep-cache.outputs.cache-hit != 'true' }}
        working-directory: julea
        env:
          JULEA_SPACK_COMPILER: ${{ matrix.os.compiler }}@${{ matrix.os.compiler_version }}
        run: ./scripts/install-dependencies.sh
      

      # https://github.com/actions/checkout/issues/209
      - name: Get commit hash
        id: julea-hash
        run: |
          echo ::set-output name=hash::$(git rev-parse --short HEAD)
      
      - name: Cache JULEA
        id: julea-cache
        uses: actions/cache@v3
        with:
          path: julea/julea-install
          key: ${{ matrix.os.dist }}-${{ matrix.os.compiler }}-${{ matrix.os.compiler_version }}-${{steps.julea-hash.outputs.hash}}

      # Build JULEA
      - name: Configure JULEA with meson
        if: ${{ steps.julea-cache.outputs.cache-hit != 'true' }}
        working-directory: julea
        run: |
          pwd
          . scripts/environment.sh
          meson setup --prefix="${GITHUB_WORKSPACE}/julea-install" --buildtype=release bld
      - name: Build JULEA with ninja
        if: ${{ steps.julea-cache.outputs.cache-hit != 'true' }}
        working-directory: julea
        run: |
          . scripts/environment.sh
          ninja -C bld
      - name: Install
        if: ${{ steps.julea-cache.outputs.cache-hit != 'true' }}
        working-directory: julea
        run: |
          . scripts/environment.sh
          ninja -C bld install
   
  
      - name: Checkout ADIOS2
        uses: actions/checkout@v3

      - name: Install MPI
        run: |
          sudo apt update || true
          sudo apt --yes --no-install-recommends install libopenmpi-dev openmpi-bin

      
      - name: Configure CMake
        working-directory: julea
        run: |
          pwd
          . scripts/environment.sh
          # . ${{github.workspace}}/julea/scripts/environment.sh
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_MPI=ON -DADIOS2_USE_DataMan=OFF -DADIOS2_USE_BZip2=OFF -DADIOS2_USE_PNG=OFF -DADIOS2_USE_JULEA=ON

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j 2

      # - name: Test
      #   working-directory: ${{github.workspace}}/build
      #   run: ctest -C ${{env.BUILD_TYPE}}



      # TODO: move to later point?
      # - name: Create JULEA configuration
        # run: |
          # . ${{github.workspace}}/julea/scripts/environment.sh 
          # cd ${{github.workspace}}/julea && julea-config --user --object-servers="$(hostname)" --kv-servers="$(hostname)" --db-servers="$(hostname)" --object-backend=posix --object-component=server --object-path="/tmp/julea-$(id -u)/posix" --kv-backend=lmdb --kv-component=server --kv-path="/tmp/julea-$(id -u)/lmdb" --db-backend=sqlite --db-component=server --db-path="/tmp/julea-$(id -u)/sqlite"
    #   run: |
    #     julea-config --user --object-servers="$(hostname)" --kv-servers="$(hostname)" --db-servers="$(hostname)" --object-backend="${{ matrix.julea.object }}" --object-component=server --object-path="/tmp/julea/object/${{ matrix.julea.object }}" --kv-backend="${{ matrix.julea.kv }}" --kv-component="${JULEA_KV_COMPONENT}" --kv-path="${JULEA_KV_PATH}" --db-backend="${{ matrix.julea.db }}" --db-component="${JULEA_DB_COMPONENT}" --db-path="${JULEA_DB_PATH}"


      # #TODO: configure MariaDB and MySQL
      # if: ${{ matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mysql' }}
    # - name: Set up MariaDB
    # #   if: ${{ matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mariadb' }}
   
  # # Job: Build ADIOS2 with JULEA enabled for JULEA engines and according examples
  # build-adios2-w-julea:
    # runs-on: ubuntu-latest

    # steps:
    # - uses: actions/checkout@v3

    # - name: Checkout JULEA
    #   run: git clone -b dai https://github.com/Bella42/julea.git

    #   # TODO: with JULEA system packages have to be removed; necessary here as well?
    # - name: Install JULEA dependencies
    #   run: ${{github.workspace}}/julea/scripts/install-dependencies.sh

    # #TODO: configure MariaDB and MySQL
    # #   if: ${{ matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mysql' }}
    # # - name: Set up MariaDB
    # #   if: ${{ matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mariadb' }}
    # - name: Setup JULEA environment
    #   # env:
    #   run: ${{github.workspace}}/julea/scripts/environment.sh
    
    # - name: Configure JULEA with meson
    #   # TODO: use and install release build
    #   run: meson setup --prefix="julea-install" bld
    
    # - name: Compile JULEA
    #   run: ninja -C bld
    
    # - name: Create JULEA configuration
    #   # run: julea-config --user --object-servers="$(hostname)" --kv-servers="$(hostname)" --db-servers="$(hostname)" --object-backend=posix --object-component=server --object-path="/tmp/julea-$(id -u)/posix" --kv-backend=lmdb --kv-component=server --kv-path="/tmp/julea-$(id -u)/lmdb" --db-backend=sqlite --db-component=server --db-path="/tmp/julea-$(id -u)/sqlite"
    #   run: |
    #     julea-config --user --object-servers="$(hostname)" --kv-servers="$(hostname)" --db-servers="$(hostname)" --object-backend="${{ matrix.julea.object }}" --object-component=server --object-path="/tmp/julea/object/${{ matrix.julea.object }}" --kv-backend="${{ matrix.julea.kv }}" --kv-component="${JULEA_KV_COMPONENT}" --kv-path="${JULEA_KV_PATH}" --db-backend="${{ matrix.julea.db }}" --db-component="${JULEA_DB_COMPONENT}" --db-path="${JULEA_DB_PATH}"
    
    # - name: Run JULEA tests
    #   env:
    #       LSAN_OPTIONS: exitcode=0
    #   run: |
    #       . scripts/environment.sh
    #       ./scripts/setup.sh start
    #       ./scripts/test.sh
    #       sleep 10
    #       ./scripts/test.sh
    #       ./scripts/setup.sh stop
    # # - name: Make example
    # # - name: Run example



    # - name: Configure CMake
    #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_MPI=OFF -DADIOS2_USE_DataMan=OFF -DADIOS2_USE_BZip2=OFF -DADIOS2_USE_PNG=OFF -DADIOS2_USE_JULEA=OFF

    # - name: Build
    #   run: cd ${{github.workspace}}/build && make -j 2

    # # - name: Test
    # #   working-directory: ${{github.workspace}}/build
    # #   run: ctest -C ${{env.BUILD_TYPE}}
